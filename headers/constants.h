#ifndef CONSTANTS_H
#define CONSTANTS_H

#include "types.h"

#define INDEX_PAWN_BITBOARD 0
#define INDEX_KNIGHT_BITBOARD 1
#define INDEX_BISHOP_BITBOARD 2
#define INDEX_ROOK_BITBOARD 3
#define INDEX_QUEEN_BITBOARD 4
#define INDEX_KING_BITBOARD 5
#define INDEX_FULL_BITBOARD 6
#define INDEX_CASTLE_BITBOARD 7
#define INDEX_EN_PASSANT_BITBOARD 8
#define BITBOARD_ARRAY_SIZE 9

#define MOVEDATA_PAWN_JUMPSTART 0b1000
#define MOVEDATA_CASTLE_SHORT 0b1001
#define MOVEDATA_CASTLE_LONG 0b1010
#define MOVEDATA_PROMOTION_N 0b1011
#define MOVEDATA_PROMOTION_B 0b1100
#define MOVEDATA_PROMOTION_R 0b1101
#define MOVEDATA_PROMOTION_Q 0b1110
#define MOVEDATA_EN_PASSANT_CAPTURE 0b1111


#define Bitboard_NotAFile 0x7F7F7F7F7F7F7F7F
#define Bitboard_NotHFile 0xFEFEFEFEFEFEFEFE

// Vulnerable Squares for Kingside castleing, includes the King square since cannot castle out of check
#define CASTLE_SQUAREMASK_VULNERABLE_WHITE 0b00111110UL
#define CASTLE_SQUAREMASK_VULNERABLE_BLACK 0x3E00000000000000UL // 0b0011 1110 000...
#define CASTLE_SQUAREMASK_VULNERABLE_BOTH 0x3E0000000000003EUL // 0b0011 1110 000...

#define CASTLE_SQUAREMASK_VULNERABLE_KINGSIDE_WHITE 0b00001110UL
#define CASTLE_SQUAREMASK_VULNERABLE_QUEENSIDE_WHITE 0b00111000UL
#define CASTLE_SQUAREMASK_VULNERABLE_KINGSIDE_BLACK 0x0E00000000000000UL // 0b0000 1110 000...
#define CASTLE_SQUAREMASK_VULNERABLE_QUEENSIDE_BLACK 0x3800000000000000UL    // 0b0011 1000 000...

// These Squares must be free
#define CASTLE_SQUARES_MUST_BE_FREE_KINGSIDE_WHITE 0b00000110UL
#define CASTLE_SQUARES_MUST_BE_FREE_QUEENSIDE_WHITE 0b01110000UL
#define CASTLE_SQUARES_MUST_BE_FREE_KINGSIDE_BLACK 0x0600000000000000UL // 0b0000 0110 000...
#define CASTLE_SQUARES_MUST_BE_FREE_QUEENSIDE_BLACK 0x7000000000000000UL    // 0b0111 0000 000...

// Masks for the King Position later
#define CASTLE_BITMASK_CASTLE_KINGSIDE_WHITE 0b00000010UL
#define CASTLE_BITMASK_CASTLE_QUEENSIDE_WHITE 0b00100000UL
#define CASTLE_BITMASK_CASTLE_KINGSIDE_BLACK 0x0200000000000000UL
#define CASTLE_BITMASK_CASTLE_QUEENSIDE_BLACK 0x2000000000000000UL

// Masks for the King Position later
#define CASTLE_BITMASK_NOT_CASTLE_KINGSIDE_WHITE ~CASTLE_BITMASK_CASTLE_KINGSIDE_WHITE
#define CASTLE_BITMASK_NOT_CASTLE_QUEENSIDE_WHITE ~CASTLE_BITMASK_CASTLE_QUEENSIDE_WHITE
#define CASTLE_BITMASK_NOT_CASTLE_KINGSIDE_BLACK ~CASTLE_BITMASK_CASTLE_KINGSIDE_BLACK
#define CASTLE_BITMASK_NOT_CASTLE_QUEENSIDE_BLACK ~CASTLE_BITMASK_CASTLE_QUEENSIDE_BLACK

// Squares for rook taking
#define CASTLE_SQUARE_ROOK_PREV_INDEX_KINGSIDE_WHITE 0
#define CASTLE_SQUARE_ROOK_PREV_INDEX_QUEENSIDE_WHITE 7
#define CASTLE_SQUARE_ROOK_PREV_INDEX_KINGSIDE_BLACK 56
#define CASTLE_SQUARE_ROOK_PREV_INDEX_QUEENSIDE_BLACK 63

// Squares for king castle legal move
#define CASTLE_TO_SQUARE_KING_INDEX_KINGSIDE_WHITE 1
#define CASTLE_TO_SQUARE_KING_INDEX_QUEENSIDE_WHITE 5
#define CASTLE_TO_SQUARE_KING_INDEX_KINGSIDE_BLACK 57
#define CASTLE_TO_SQUARE_KING_INDEX_QUEENSIDE_BLACK 61

// Castle masks
static Bitboard CASTLE_XOR_MASKS_KING[4] = {	// Index = Move Data - 0b1001 since 0b1001 = 0
    0x000000000000000A,	// White castle Kingside, 0000 1010
    0x0000000000000028,	// White caslte Queenside, 0010 1000
    0x0A00000000000000, // Black castle Kingside, 0000 1010
    0x2800000000000000	// Black castle Queenside, 0010 1000
};

static Bitboard CASTLE_XOR_MASKS_ROOK[4] = {	// Index = Move Data - 0b1001 since 0b1001 = 0, so Move Data - 9
    0x0000000000000005,	// White castle Kingside, 0000 0101
    0x0000000000000090,	// White caslte Queenside, 1001 0000
    0x0500000000000000, // Black castle Kingside, 0000 0101
    0x9000000000000000	// Black castle Queenside, 1001 0000
};

// Values

#define ALGORITHM_CONSTANT_KING_CAPTUREVALUE 999999999

#endif